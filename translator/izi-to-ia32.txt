Izi
ADD OP
ACC <- ACC + MEM[OP]

IA32
mov eax, [ACC]
add eax, [OP]
mov [ACC], eax
-----------------------

Izi
SUB OP
ACC <- ACC - MEM[OP]

IA32
mov eax, [ACC]
sub eax, [OP]
mov [ACC], eax
-----------------------

Izi
MULT OP
ACC <- ACC * MEM[OP]

IA32
mov eax, [ACC]
mov edx, [OP]
imul edx
mov [ACC], eax
-----------------------

Izi
DIV OP
ACC <- ACC / MEM[OP]

IA32
mov eax, [ACC]
cdq
mov ecx, [OP]
idiv ecx
mov [ACC], eax
-----------------------

Izi
JMP OP
PC <- OP

IA32
jmp [OP]
-----------------------

Izi
JMPN OP
If ACC < 0, PC <- OP

IA32
mov eax, [ACC]
comp eax, 0
jl OP
-----------------------

Izi
JMPP OP
If ACC > 0, PC <- OP

IA32
mov eax, [ACC]
comp eax, 0
jg OP
-----------------------

Izi
JMPZ OP
If ACC == 0, PC <- OP

IA32
mov eax, [ACC]
comp eax, 0
je OP
-----------------------

Izi
COPY OP1  OP2
MEM[OP2] <- MEM[OP1]

IA32
mov eax, [OP1]
mov [OP2], eax
-----------------------

Izi
LOAD OP
ACC <- MEM[OP]

IA32
mov eax, [OP]
mov [ACC], eax
-----------------------

Izi
STORE OP
MEM[OP] <- ACC

IA32
mov eax, [ACC]
mov [OP], eax
-----------------------

Izi
STOP

IA32
mov eax, 1
mov ebx, 0
int 80h
-----------------------
